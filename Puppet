# Source http://www.example42.com/tutorials/PuppetTutorial/#slide-0
Puppet uses Ruby.It's configuration. mgt tool ( Infrastructure as code)  . Reproducible set up , scalable, aligned environment for dev,test, prod

# Software related to puppets - 
- Facter - Complementary tool to retrieve system's data
- MCollective - Infrastructure Orchestration framework
- Hiera - Key-value lookup tool where Puppet data can be placed
- PuppetDB - Stores all the data generated by Puppet
- Puppet DashBoard - A Puppet Web frontend and External Node Classifier (ENC)
- The Foreman - A well-known third party provisioning tool and Puppet ENC
- Geppetto - A Puppet IDE based on Eclipse

apt-get install puppet       # On clients (nodes)
apt-get install puppetmaster # On server (master)

# From version 2 Puppet follows Semantic Versioning standards to manage versioning, with a pattern like: MAJOR.MINOR.PATCH
# Terms used in Puppet language are as follow
- Resource types
- Classes and defines
- Variables and parameters
- Nodes classification

Similar to recipe(chef) , we have manifest(with .pp extension) in puppet
Similar to resources(files, services, apt-update etc) in Chef, we call it resources in Puppet too however we have classes that group all resources and can expose parameters that may impact their behaviors
Similar to cookbooks(combination of all recipes) in chef , here we have modules in puppet 

Example of resource - 
type { 'title':        # type (package, service, file, user, mount)
  argument  => value,
  other_arg => value,
}
file { 'motd':
  path    => '/etc/motd',
  content => 'Tomorrow is another day',
}
service { 'httpd':
  ensure => running,
  enable => true,
}
package { 'openssh':
  ensure => present,
}

# Management of nginx service with parameters defined in module's variables
service { 'nginx':
  ensure     => $::nginx::manage_service_ensure,
  name       => $::nginx::service_name,
  enable     => $::nginx::manage_service_enable,
}

# Creation of nginx.conf with content retrieved from different sources (first found is served)
file { 'nginx.conf':
  ensure  => present,
  path    => '/etc/nginx/nginx.conf',
  source  => [
      "puppet:///modules/site/nginx.conf--${::fqdn}",
      "puppet:///modules/site/nginx.conf" ],
}

-------------## Classes are collection of resources and parameters as shown below
class mysql (
  root_password => 'default_value',          ## This is parameter of the class
  port          => '3306',                   ## This is parameter of the class
) {
  package { 'mysql-server':                  ## Here package and services are resources of the class.
    ensure => present,
  }
  service { 'mysql':
    ensure    => running,
  }
  [...]
}

--------------## "defines" there are same as parameterized class shown above but these can be used multiple times with different names
It has 'definition' and 'declaration' sections as shown below - 
--Definition of a define:
define apache::virtualhost (
  $ensure   = present,
  $template = 'apache/virtualhost.conf.erb' ,
  [...] ) {

  file { "ApacheVirtualHost_${name}":
    ensure  => $ensure,
    content => template("${template}"),
  }
}
--Declaration of a define:
apache::virtualhost { 'www.example42.com':
  template => 'site/apache/www.example42.com-erb'
}

------------------------------------------------
Puppet client                  ------>         Puppet server
   ^^^^^
Facter runs on client          ->which is used by purppet server

Facter collects client system info as shown below
al$ facter
architecture => x86_64
fqdn => Macante.example42.com
hostname => Macante
interfaces => lo0,eth0
ipaddress => 10.42.42.98 
--------------------------------------------














