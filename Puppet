# Source http://www.example42.com/tutorials/PuppetTutorial/#slide-0
Puppet uses Ruby.It's configuration. mgt tool ( Infrastructure as code)  . Reproducible set up , scalable, aligned environment for dev,test, prod

# Software related to puppets - 
- Facter - Complementary tool to retrieve system's data
- MCollective - An orchestration framework that allows massively parallel actions on the infrastructure's server
- Hiera - Key-value lookup tool where Puppet data can be placed such as classes
- PuppetDB - PuppetDB is a "fast, scalable and reliable" data warehouse for Puppet.
- Puppet DashBoard - A Puppet Web frontend and External Node Classifier (ENC)
- The Foreman - A well-known third party provisioning tool and Puppet ENC
- Geppetto - A Puppet IDE based on Eclipse

apt-get install puppet       # On clients (nodes)
apt-get install puppetmaster # On server (master)

# From version 2 Puppet follows Semantic Versioning standards to manage versioning, with a pattern like: MAJOR.MINOR.PATCH
# Terms used in Puppet language are as follow
- Resource types
- Classes and defines
- Variables and parameters
- Nodes classification

Similar to recipe(chef .rb extension) , we have manifest(with .pp extension) in puppet
Similar to resources(files, services, apt-update etc) in Chef, we call it resources in Puppet too however we have classes that group all resources and can expose parameters that may impact their behaviors
Similar to cookbooks(combination of all recipes) in chef , here we have modules in puppet 
Since chef uses workstation or Chef developmen kit , it uses knife CLI to send recipe or cookbbok to chef server which then gets applied
at chef client, in case of puppet there is no CLI tool since facter is enough to apply manifest site.pp directly to puppet node .


Example of resource - 
type { 'title':        # type (package, service, file, user, mount)
  argument  => value,
  other_arg => value,
}
file { 'motd':
  path    => '/etc/motd',
  content => 'Tomorrow is another day',
}
service { 'httpd':
  ensure => running,
  enable => true,
}
package { 'openssh':
  ensure => present,
}
-----------Run stage in the manifest-- Manage depenencies in the resources -- Manage dependencies (before, require, subscribe, notify, stage)
stage { 'pre':
  before => Stage['main'],
}
or-
class { 'yum':
  stage => 'pre',
}
----------Metaparameters (managing dependencies) in the mainifest-- Manage dependencies (before, require, subscribe, notify, stage)
In a typical Package/Service/Configuration file example we want the package to be installed first, configure it and then start 
the service, eventually managing its restart if the config file changes
package { 'exim':
  before => File['exim.conf'],  
}
file { 'exim.conf':
  notify => Service['exim'],
}
service { 'exim':
}
-- This is equivalent to Package['exim'] -> File['exim.conf'] ~> Service['exim']
Below is the reverse metaparameters - 
package { 'exim':
}
file { 'exim.conf':
  require => Package['exim'],
}
service { 'exim':
  subscribe => File['exim.conf'],
}
Which is equivalent to Service['exim'] <~ File['exim.conf'] <- Package['exim']
--------------------using selector for variable assignments, case and if-else-endif statement in the manifest 
some examples of operators  - if $::osfamily == 'Debian' { [ ... ] }
----------------------
# Management of nginx service with parameters defined in module's variables
service { 'nginx':
  ensure     => $::nginx::manage_service_ensure,
  name       => $::nginx::service_name,
  enable     => $::nginx::manage_service_enable,
}

# Creation of nginx.conf with content retrieved from different sources (first found is served)
file { 'nginx.conf':
  ensure  => present,
  path    => '/etc/nginx/nginx.conf',
  source  => [
      "puppet:///modules/site/nginx.conf--${::fqdn}",
      "puppet:///modules/site/nginx.conf" ],
}

-------------## Classes are collection of resources and parameters as shown below
# All classes and parameters are placed in /etc/puppet/manifest/site.pp
class mysql (
  root_password => 'default_value',          ## This is parameter of the class
  port          => '3306',                   ## This is parameter of the class
) {
  package { 'mysql-server':                  ## Here package and services are resources of the class.
    ensure => present,
  }
  service { 'mysql':
    ensure    => running,
  }
  [...]
}
It is also possible to inherit other class - 
class puppet::server inherits mysql {
  File['/etc/puppet/puppet.conf'] {
    content => template('puppet/server/puppet.conf'),
  }
}
--------------## "defines" there are same as parameterized class shown above but these can be used multiple times with different names
It has 'definition' and 'declaration' sections as shown below - 
--Definition of a define:
define apache::virtualhost (
  $ensure   = present,
  $template = 'apache/virtualhost.conf.erb' ,
  [...] ) {

  file { "ApacheVirtualHost_${name}":
    ensure  => $ensure,
    content => template("${template}"),
  }
}
--Declaration of a define:
apache::virtualhost { 'www.example42.com':
  template => 'site/apache/www.example42.com-erb'
}
----------------------------------------------Modules 
# Just like chef cookbook, modules are used to manage an application, system's resources, a local site or more complex structures
----------------------------------------------------
Puppet client                  ------>         Puppet server
   ^^^^^
Facter runs on client          ------>         which is used by purppet server

Facter collects client system info as shown below
al$ facter
architecture => x86_64
fqdn => Macante.example42.com
hostname => Macante
interfaces => lo0,eth0
ipaddress => 10.42.42.98 
--------------------------------------------
What is node -- This is identified by puppter master using certname. So we can mention all the nodes into site.pp file 
node 'web01' , 'web02' , 'web03' {
  include apache
}
We can also inherits other nodes as shown below
node 'general' { ... }

node 'www01' inherits general { ... }
---- some therory --
So it is also possible that Puppet can query an external source to retrieve the classes and the parameters to assign to a node. 
This source is called External Node Classifier (ENC).Common ENC are Puppet DashBoard, The Foreman and Puppet Enterprise 
(where the functionality of ENC is enabled by default).
-
Hiera provides a hiera_include function that allows the inclusion of classes as defined on Hiera. 
hiera_include('classes')

The catalog is the complete list of resources, and their relationships, that the Puppet Master generates for the client.
It's the result of all the puppet code and logic that we define for a given node in our manifests and is applied on the client after it has 
been received from the master. It is stored at - 
/var/lib/puppet/client_data/catalog/$certname.json

------ some commands -- 
puppet describe
puppet resource
facter
puppet apply
-------Operational Mode 
Two types - 1. Masterless - puppet apply      2. Master / Client - puppet agent
In case 1 - Puppet code (written in manifests) is applied directly on the target system.puppet apply (generally as root).
            Puppet manifests are deployed directly on nodes and applied locally:
            puppet apply --modulepath /modules/ /manifests/file.pp
In case 2 - There are managed nodes, where Puppet client is installed. One or more Masters where Puppet server runs as a service.
            Client/Server communication is via https (port 8140).Clients certificates have to be accepted (signed) on the Master.Client and Server have to share SSL certificates. New client certificates must be signed by the Master CA
            on the client: puppet agent (generally as root) and on the server: puppet master (generally as puppet).
            A Puppet client (running as 'root') on each managed node. Client can be run as a service (default), via cron 
            (with random delays), manually or via MCollective.

Few commands related to certificats on puppter master - 
puppet cert list
puppet cert list --all
puppet cert sign <certname>

-----Puppet configuration details
puppet.conf is main configuration file. For opensource puppet it is at /etc/puppet/puppet.conf and for puppter enterprise - /etc/puppetlabs/puppet/puppet.conf

-----Common command line parameters 
puppet agent --test # Can be abbreviate to -t
puppet agent --test --debug
puppet agent --test --noop              # Run a dry-run puppet without making any change to the system:
puppet agent --test --waitforcert 120   # Wait for certificate approval (by default 120 seconds) in the first Puppet run 
puppet describe -s <type>               # check all the types documentation 
puppet resource <type> [name]           # To interactively inspect and modify our system's resources
------------Anatomy of puppet run(pull mechanism) ---------------
puppet agent -t    # on puppet client node machine. 
--If pluginsync = true then client retrieves all extra plugins (facts, types and providers) present in modules on the server's $modulepath
--The client runs facter and send its facts to the server
--The server looks for the client's hostname (or certname, if different from the hostname) and looks into its nodes list
--If there are not syntax errors in the processed Puppet code, the server sends the catalog to the client, in PSON format.
--The client receives the catalog and starts to apply it locally
--Info - Applying configuration version '1355353107'
--At the end ot the Puppet run the client sends to the server a report of what has been changed
--The server eventually sends the report to a Report Collector
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Optimizing puppet for performance - TIPS 

- Reduce the number of resources per node
- For each resource Puppet has to serialize, deserialize, apply, report...
- Avoid use of resources for too many entities (Do manage hundreds of users with the User type)
- Limit overhead of containing classes
(A module with the openssh::package, openssh::service, openssh::configuration subclasses pattern is uselessly filled with extra resources)

- Do not use the file type to deliver too large files or binaries:
- For each file Puppet has to make a checksum to verify if it has changed
- With source => , the content of the file is retrieved with a new connection to the PuppetMaster
- With content => template() , the content is placed inside the catalog.
- Avoid too many elements in a source array for file retrieval:



























