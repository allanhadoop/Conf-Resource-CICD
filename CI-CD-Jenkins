# Canary Release -
Canary deployments are a pattern for rolling out releases to a subset of users or servers. 
The idea is to first deploy the change to a small subset of servers, test it, and then roll the change out to the rest of the servers. ...
The basic steps of a canary deployment are: Deploy to one or more canary servers

# Blue-Green deployment - Blue-green deployment is a release technique that reduces downtime and risk by running two identical 
production environments called Blue and Green. At any time, only one of the environments is live, with the live environment serving 
all production traffic. ... Green is now live, and Blue is idle

--------------------------------------------------------------
# Building RPM package source -  http://www.tldp.org/HOWTO/RPM-HOWTO/build.html
# Jenkins install with Apache reverse proxy - https://www.howtoforge.com/tutorial/how-to-install-jenkins-with-apache-on-ubuntu-16-04/
--------------------------------------------------------------
Jenkins is CI/CD tool written in Java. It automatically builds, test and deploy software projects. All we need is a server to host jenkins
So Jenkins installation needs Java(Open JDK and JRE) , add Jenkins repository and then install jenkins

Summary -
1. Jenkins installation 
2. Installing webhook on bitbucket and Jenkins plugins for bitbucket for auto code push 
3. Installing phpunit on jenkins serever, pushing code from bitbucket and then executing shell command to test phpunit in jenkins console
4. Get OAuth1 from bitbucket and set up in jenkins for pushing build status to bitbucket.. same process for slack
5. Using credential plugin for setting enviromment variables like userid/password etc and using them into shell as a $variables
6. Using git-ftp plugin and pulling code fron git and pushing it to new ftp server using shell command from jenkins console
7. Using embedded status bars using plugin to show status of job to teams controlled via security
8. Installaing disk usage plugin to monitor job disk usage.


# Jenkins Installaton , Jenkins Github setup, Jenkins maven set up , Jenkins Tomcat set, Coniguration , Management, setup build jobs.
# job automation , reporting.
# Example perform following steps
-Perform a software build with Apache Maven or Gradle
-Run a shell script
-Archive the build result
-Afterwards start the integration tests

---------
#### Jenkins installation  ON EC2 - (SOURCE http://sanketdangi.com/post/62715793234/install-configure-jenkins-on-amazon-linux) 
# Jenkins runs on http://localhost:8080/
sudo apt-get install openjdk-7-jre
sudo apt-get install openjdk-7-jdk
java -version
wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins

# Jenkins will be at /var/lib folder 

netstat -a -n -o | grep "8080"
http://localhost:8080/jenkins OR
http://<Elastic-IP>:8080  


# To run git source code on Jenkins, install git on Jenkins server since Jenkins give source code management SCM to pull code from git, csv etc
sudo apt-get install git
Install git plugin on Jenkin console

# Now integrate webhook of bitbucket with Jenkins bitbucket plugin
#### Running PHP unit test after each commit - Steps as follows
  . Show test code 
  . Install PHPUnit & Junit plugin
  . Configure job to run test
  . Test and verify

So basically Start build (on jenkins) will run Phpunit test on Server and will store ourput to filesystem (e.g. unit_test_result.xml) 
Jenkins will then parse the result and act accordingly. So to run this phpunit , we need to first install junit on jenkins server.

sudo apt-get install phpunit
>Now install junit plugin on Jenkins console.

Now configure jenkins job to ADD A BUILD STEP to run shell script to run phpunit and configure ADD POST BUILD STEP to log output to 
phpunit.xml filesystem
>> phpunit --log-junit results/phpunit/phpunit.xml

So it is possible to send status or result report o bitbucket using status API..so we know what was status of each commit in bitbucket itself
Steps - 
1. Create OAuth keys on bitbucket  
2. Install bitbucket status notifier plugin
3. Configure jenkins and test

--On bitbucket there is option for OAuth , configure that to jenkins ip:8080 and allow it to read and write status report to repo.
note the key and scret generated by bitbucket which is useful in jenkins console.
--now install bitbucket status notifier plugin & bitbucket OAuth plugin on jenkins console and put key/secret key to communicate jenkins to bitbucket
--now configure jenkins job and ADD POST BUILD STEP.. to add notify step

#### Environment variables - Jenkins has safe credential repository like a global table to store all user credentials.
Steps - 
1. Install credential binding plugin from jenkins console. 
2. Go to credential section on console and add variables for user id
3. Now create job and go to (build environment)/bind username and password
4. Now in the execute shell -- we can refer those env. variables just like in shell using $ . E.g. below
git ftp push --user $MYUSER --passwd $MYPASS ftp://server_Address_here


#### Deploy website to ftp server - 
So example - we have index.html website page which needs to be hosted on some ftp server. Index.html is at git repo so Jenkin's task is 
to take that code from git and connect to ftp server and push that code. So jenkins is like a middleman here.git-ftp -- This software 
needs to be installed on jenkins server to update changes from git to ftp server. 

Steps - 
sudo apt-get install git-ftp
Now create credentials at jenkins console and follow same steps above above (from environment variables section) 
git ftp init --user $MYUSER --passwd $MYPASS ftp://191.32.43.42/public_html
git ftp push --user $MYUSER --passwd $MYPASS ftp://191.32.43.42/public_html   (push for future changes)

#### Embedded build status - This is to let other user to see job status.. install plugin and give security 
This status can be published on some webpage for folks to see.


#### Disk usage plugins - to monitor disk usage.

#### Integrating Jenkins with Slack to monitor build start, stops or fails. 
Steps - 
1. Install slack notification plugin.
2. Now go to slack , create new channel & add app for Jenkins integration and get team domain & token (just like what we did for bitbucket
OAuth1 to obtain jenkins build status)




-----------------------------------------------------------More info below -----------
# Under manage jenkins 
#--> configure system --> we can set environment variable (example terraform variables) or git server , 
ssh server , docker registry,shell script, email etc

------
# To access private Git repo, generate ssh key  
sudo -u jenkins ssh-keygen
# Jenkins supports the Git version control system via a plugin.
# Install plugin from manage plugin 'Git plugin' and then restart jenkins by http://localhost:8080/jenkins/restart

----
# Tomcat Setup 
# Copy the Jenkis.war file which was downloaded from the previous section and copy it to the webapps folder in the tomcat folder.


-------------------------------Code push from github project to trigger Jenkins job build 
# source - https://learning-continuous-deployment.github.io/jenkins/github/2015/04/17/github-jenkins/
# Jenikins build process is automatically started when a contributor pushes to the respective GitHub repository.

Jenkins steps - 
1. Create new item ( jenkins job) 
2. Enter URL of git repo 
3. Under source-code-management' option choose, Git option . There is other options such as CVS , etc 
4. Enter the repository clone-URL in the appearing text field
5. Now check the “Build when a change is pushed to GitHub” option in the “Build Triggers” section
6. Finally, get Jenkins web hook URL from Jenkins system settings (Manage Jenkins -> Configure System - Manually manage hook URLs”) 
This URL is required to create a hook in github repo later.

Github steps - 
1. Configure the GitHub repository
2. Adding service -- GitHub project settings and click on “Webhooks & Services”. Press the “Add service” button and choose “Jenkins (GitHub plugin)” from 
the service list.















