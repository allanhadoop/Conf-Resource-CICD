# Canary Release -
Canary deployments are a pattern for rolling out releases to a subset of users or servers. 
The idea is to first deploy the change to a small subset of servers, test it, and then roll the change out to the rest of the servers. ...
The basic steps of a canary deployment are: Deploy to one or more canary servers

# Blue-Green deployment - Blue-green deployment is a release technique that reduces downtime and risk by running two identical 
production environments called Blue and Green. At any time, only one of the environments is live, with the live environment serving 
all production traffic. ... Green is now live, and Blue is idle

--------------------------------------------------------------
# Building RPM package source -  http://www.tldp.org/HOWTO/RPM-HOWTO/build.html

--------------------------------------------------------------
# Jenkins Installaton , Jenkins Github setup, Jenkins maven set up , Jenkins Tomcat set, Coniguration , Management, setup build jobs.
# job automation , reporting.
# Example perform following steps
-Perform a software build with Apache Maven or Gradle
-Run a shell script
-Archive the build result
-Afterwards start the integration tests

---------
#Jenkins installation  ON EC2 - (SOURCE http://sanketdangi.com/post/62715793234/install-configure-jenkins-on-amazon-linux) 
# Jenkins runs on http://localhost:8080/
wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins

# Jenkins will be at /var/lib folder 

netstat -a -n -o | grep "8080"
http://localhost:8080/jenkins OR
http://<Elastic-IP>:8080  


# Under manage jenkins --> configure system --> we can set environment variable (example terraform variables) or git server , 
ssh server , docker registry,shell script, email etc

------
# To access private Git repo, generate ssh key  
sudo -u jenkins ssh-keygen
# Jenkins supports the Git version control system via a plugin.
# Install plugin from manage plugin 'Git plugin' and then restart jenkins by http://localhost:8080/jenkins/restart



----
# Tomcat Setup 
# Copy the Jenkis.war file which was downloaded from the previous section and copy it to the webapps folder in the tomcat folder.


-------------------------------Code push from github project to trigger Jenkins job build 
# source - https://learning-continuous-deployment.github.io/jenkins/github/2015/04/17/github-jenkins/
# Jenikins build process is automatically started when a contributor pushes to the respective GitHub repository.

Jenkins steps - 
1. Create new item ( jenkins job) 
2. Enter URL of git repo 
3. Under source-code-management' option choose, Git option . There is other options such as CVS , etc 
4. Enter the repository clone-URL in the appearing text field
5. Now check the “Build when a change is pushed to GitHub” option in the “Build Triggers” section
6. Finally, get Jenkins web hook URL from Jenkins system settings (Manage Jenkins -> Configure System - Manually manage hook URLs”) 
This URL is required to create a hook in github repo later.

Github steps - 
1. Configure the GitHub repository
2. Adding service -- GitHub project settings and click on “Webhooks & Services”. Press the “Add service” button and choose “Jenkins (GitHub plugin)” from 
the service list.















