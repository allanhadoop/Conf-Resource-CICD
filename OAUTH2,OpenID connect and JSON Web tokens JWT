Modern Security for Enterprise Applications - OAUTH2,OpenID connect and JSON Web tokens JWT
Youtube - https://www.youtube.com/watch?v=oXxbB5kv9OA
See architecture folder for details of example of header and cliams
OAuth2 --

Autherization server <----> Client --this uses token 

json web token (JWT) - 
1. A client (e.g. web application) requests a token
2. A issuer issues a token
3. A resource (e.g. API , key exchange) consumes a token , that has a trust relationship with the issuer.

JSON web token has two main sections as follows
1. Header - 
    a. Metadata (Example password) 
    b. Algorithm and Key used (eg. HSC256 HS384, HS512) 
2. Claims 
    a. Issuer(iss)
    b. Audience(aud)
    c. Expiration(Exp)
    d. Subject(sub)
    e. ...and application defined claims

In the create JWT link below, you can enter all of the above info and generate JWT 


Links for JSON web tokens(JWT) - Note it is http , not www.
1. Create tokens - 
http://jwtbuilder.jamiekurtz.com
http://kjur.github.io/jsjws/tool_jwt.html 

2. Verify JWT tokens
http://jwt.io

3. Base64 Encode/Decode
https://base64encode.org
https://base64decode.org

Tokens are - 
1. Json encoded, 
2. Symmetric and asymmetric signatures (HMACSHA256-384, ECDSA, RSA) 
3. Symmetric and asymmetric encryption (RSA, AES/CGM)

----------------------------------------------OAuth2-----------------
So there are 2 types of car keys ( master key and valley parking keys ) . Same concept here in OAuth2

Resource server --------------> Client ------------> Resource owner 
Here resource owner (Car owner)  gives valley parking key(limited access key,not master key - this is authorization server) to Client ( parking guy) to access 
data at Resource Server(car) So piece of software is allowed access to client by a resource owner since resource owner owns data at 
resource center, so Oauth2 is more of a delegated authorization (access tokens). This is typically used in iOt platform since every 
client needs separate token 

see architecture diagram .

oAuth2 Flows - 
1. Authorization Code flow 
    a. Web application client 
        . Request authorization 
        . Request token (valley key) 
        . Access resource (Car)
2. Implicit Flow
    a. Native/local clients
        . Request authorization and token (valley key) 
        . Access resources (Car) 
3. Resource Owner password credential flow 
4. Client credential flow

1. Authorization Code flow (for web applications clients) 
Step1 - Here client sends below request to resource owner which in turns sends it to auth.server
    GET/ Authorize
      client_id=webapp&  --this is identity of client 
      scope=resource&  --this is what client is looking to access as resource
      redirect_uri=https://webapp/cb&  --auth server gets redirect to this uri
      response_type=code&   --this code is sent by auth server 
      state=123          --this is sent by client to auth server and this is received back so that client know which request it corresponds

 Step2- Token request . This is what client sends token request to auth.server.
 POST/token 
   Authorization: Basic (client_id:secret)
   grant_type=auhorization_code&
   authorization_code=xyz&
   redirect_uri=https://webapp/cb
   
Step3- Token response . This is what auth. server sends to client
{
   "access_token" : "abc",
   "expires_in" : "3600",
   "token_type" : "Bearer",
   "referesh_token" : "xyz"
 }
 
 
 
 




   
   
   
   
   
  
  
  
  











