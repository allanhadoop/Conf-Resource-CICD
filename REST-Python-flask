# Designing a RESTful API with Python and Flask
Source - https://www.cs.utexas.edu/~cannata/networking/Class%20Notes/07%20Designing%20a%20RESTful%20API%20with%20Python%20and%20Flask%20-%20miguelgrinberg.pdf
# github code - https://gist.github.com/miguelgrinberg/5614326

1. Client-Server: Server offers a service, and the client consumes it.
2. Stateless: Each request from a client must contain all the information required by the server to carry out the request. 
In other words, the server cannot store information provided by the client in one request and use it in another request.
3. Cacheable: The server must indicate to the client if requests can be cached or not.
4. Layered System: Communication between a client and a server should be standardized in such a way that allows intermediaries to respond 
to requests instead of the end server, without the client having to do anything different.
 
# REST architecture was originally designed to fit the HTTP protocol. REST has resources, Resources are represented by URIs
# The clients send requests to these URIs using the methods defined by the HTTP protocol

HTTP method          Action 
-----------------------------------------------------
GET                 Obtain information about a resource (example - http://example.com/api/orders (retrieve order list))   
POST                Create a new resource
PUT                 Update a resource
DELETE              Delete a resource

The REST design does not require a specific format for the data provided with the requests. In general data is provided in the request 
body as a JSON blob, or sometimes as arguments in the query string portion of the URL.

-------------Business scenario --- Design --------
Let's say we want to write a To Do List application and we want to design a web service for it. 
1. First decide name of the application and version of the API in the URL - ï¿¼http://[hostname]/todo/api/v1.0/
2. Example of GET method - http://[hostname]/todo/api/v1.0/tasks   ( Retrieve list of tasks) 

We can define a task resource having the following fields:
 id: unique identifier for tasks. Numeric type. 
 title: short task description. String type. 
 description: long task description. Text type. 
 done: task completion state. Boolean type.
 
# Libraries and Annotations in the Flask web framework 
from flask import make_response, request, url_for, jsonify, abort, Flask
app = Flask(__name__)
@app.route(/ ,  methods = ['POST'] / [GET] ....) 
@app.errorhandler
app.run
@auth.get_password    #for basic authorization 
@auth.login_required  #use before whichever function needs login

In a regular web application you would have a login form that posts the credentials, and at that point the server would create a 
session for the logged in user to continue working, with the session id stored in a cookie in the client browser. Unfortunately doing 
that here would violate the stateless requirement of REST, so instead we have to ask clients to send their authentication information 
with every request they send to us.REST follows HTTP protocol which provides 2 authentication ( Basic and Digest).
# install Flask-HTTPAuth extension  

-------------Business scenario --- Implementation --------

# Flask web application is structured.

sudo easy_install
sudo easy_install pip
sudo pip install virtualenv

mkdir todo-api
cd todo-api
virtualenv flask
sudo nano app.py
$ flask/bin/pip install flask-httpauth

--------Implementation (No security) --------------------
#!flask/bin/python

from flask import Flask, jsonify, abort, request
from flask import make_response
from flask import url_for

app = Flask(__name__)
tasks = [
    {
        'id' : 1,
        'title' : u'Buy groceries',
        'description' : u'milk, cheese, pizza',
        'status' : False
    },
    {
        'id': 2,
        'title': u'Buy groceries',
        'description': 'curry, rice and chapati',
        'status': False
    }
]
# below function illuminate the id so that client doesnot see id in the response.
def make_public_task(tasks):
    new_task = {}
    for field in tasks:
        if field == 'id':
            new_task['uri'] = url_for('get_task', task_id = tasks['id'], _external=True )
        else:
            new_task[field] = tasks[field]
    return new_task

@app.route('/todo/api/v1.0/tasks', methods = ['GET'])
def get_tasks():
    return jsonify({'tasks' : map(make_public_task, tasks)}) #this will hide id to the client response
# 
@app.route('/todo/api/v1.0/tasks/<int:task_id>',methods = ['GET'])
def get_task(task_id):
    task = filter(lambda t:t['id'] == task_id, tasks)
    if len(tasks) == 0:
        abort(404)
    return jsonify({'tasks' : task[0] })    # this will show id to the client in response
# 
@app.errorhandler(404)
def not_found(error):
    return make_response(jsonify({'error': 'Not found'}),404)
# 

@app.route('/todo/api/v1.0/tasks', methods = ['POST'])
def create_task():
    if not request.json or not 'title' in request.json:
        abort(400)
    task = {
        'id' : tasks[-1]['id'] + 1,
        'title' : request.json['title'],
        'description' : request.json.get('description', ""),
        'status' : False
    }
    tasks.append(task)
    return jsonify({'task' : task}),201

if __name__ == '__main__':
    app.run(debug = True)

--------Implementation (with basic userid/password security) --------------------
# The authentication extension gives us the freedom to choose which functions in the service are open and which are protected.
from flask.ext.httpauth import HTTPBasicAuth
auth = HTTPBasicAuth()
@auth.get_password
def get_password(username):
    if username == 'allan':
        return 'mypassword'
    return None

@auth.error_handler
def unathorized():
    return make_response(jsonify({ 'error' :'Unauthorized access'}), 401)

# You now reqiure user id and password to get data .. so use example curl with user id to get access
$ curl -u miguel:python -i http://localhost:5000/todo/api/v1.0/tasks

--------Implementation (Flask-RESTful extension) --------------------
Flask-RESTful provides a Resource base class that can define the routing for one or more HTTP methods for a given URL
# source - https://blog.miguelgrinberg.com/post/designing-a-restful-api-using-flask-restful

As shown below - the add_resource function registers the routes with the framework using the given endpoint. If an endpoint isn't given then 
Flask-RESTful generates one for you from the class name.

RequestParser class is used for validation of PUT request. 












------------------------------------Oauth / tokenization instead of user id /passwrord --------------------
Having to send the username and the password with every request is inconvenient and can be seen as a security risk even if the transport 
is secure HTTP, since the client application must have those credentials stored without encryption to be able to send them with the 
requests. An improvement over the previous solution is to use a token to authenticate requests.Tokens are usually given out with an 
expiration time, after which they become invalid and a new token needs to be obtained. 

A straightforward implementation is to generate a random sequence of characters of certain length that is stored with the user and the 
password in the database, possibly with an expiration date as well. The token then becomes sort of a plain text password, in that can be 
easily verified with a string comparison, plus a check of its expiration date.

A more elaborated implementation that requires no server side storage is to use a cryptographically signed message as a token. This has 
the advantage that the information related to the token, namely the user for which the token was generated, is encoded in the token itself 
and protected against tampering with a strong cryptographic signature.

-----------------What is OAuth --------------
For example, consider a website or application that asks you for permission to access your Facebook account and post something to your 
timeline. In this example you are the resource holder (you own your Facebook timeline), the third party application is the consumer and 
Facebook is the provider. Even if you grant access and the consumer application writes to your timeline, it never sees your Facebook login 
information.
- This usage of OAuth does not apply to a client/server RESTful API. Something like this would only make sense if your RESTful 
API can be accessed by third party applications (consumers).

-----------------What is 2 legged - OAuth - typically used for restapi--------------
source - http://www.lexev.org/en/2015/oauth-step-step/
OAuth 1.0 - (3-legged standard process from the client side.) 
# The main part to remember about OAuth 1.0 - it signs all requests with secret key. Secret key must be kept in safe place, the only one 
is server. Protocol provides fully security, even if https is not used. By saying "security" i mean the following: once the request was 
eavesdropped, the hacker can't create new valid request. Of course he can get the data being transmitted, to hide the data we still need 
the https.
see this diagram  - https://malalanayake.wordpress.com/2013/01/09/3-legged-oauth-flow/

1. The consumer requests a request token (usually by passing an application key and application secret)
2. The user is then redirected to a login page, passing the request token to that page
3. User logs in and is redirected back to the consumer, passing the request token to the consumer's page
4. The consumer exchanges the request token for an access token
5. If the previous request was valid, the server will return an access token to the consumer. The access token is used for API requests
6. During this process, the authorization is processed using multiple predefined URLs, called endpoints. There are 3 endpoints:

- Request URI (this endpoint passes the request token)
- Access URI (exchanges request token for an access token)
- Authorize URI (confirms that the access token is valid) 


- Oauth grants third-party applications access to the resources without sharing passwords.


















